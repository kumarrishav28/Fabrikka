version: "3.8"

networks:
  loki:
  Fabrikka:
    driver: bridge

services:
  read:
    image: grafana/loki:2.9.5
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      loki:
        aliases:
          - loki

  write:
    image: grafana/loki:2.9.5
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:v1.0.0
    volumes:
      - ./alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    networks:
      - loki

  minio:
    image: minio/minio:RELEASE.2024-01-25T05-56-59Z
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-loki}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - "9000:9000"
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - loki

  prometheus:
    image: prom/prometheus:v2.51.2
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml
    # Prometheus must wait for all its scrape targets to be healthy
    depends_on:
      api-gateway: { condition: service_healthy }
      discovery-server: { condition: service_healthy }
      user-service: { condition: service_healthy }
      product-service: { condition: service_healthy }
      order-service: { condition: service_healthy }
      notification-service: { condition: service_healthy }
      inventory-service: { condition: service_healthy }
      load-product: { condition: service_healthy }
      cart-service: { condition: service_healthy }
    networks:
      - loki
      - Fabrikka

  grafana:
    image: grafana/grafana:10.4.1
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ./datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - loki

  backend:
    image: grafana/loki:2.9.5
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - loki

  gateway:
    image: nginx:1.25.4
    depends_on:
      - read
      - write
    # Externalize the NGINX config for better readability and management
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "3100:3100"
    healthcheck:
      # This healthcheck correctly verifies if NGINX is responsive
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3100/"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - loki

  api-gateway:
    image: ${DOCKER_USER}/api-gateway:${SERVICE_VERSION}
    ports:
      - "8084:8084"
    environment:
      SPRING_APPLICATION_NAME: api-gateway
      # Aligning with other services to use the 'dev' profile from the config server
      SPRING_PROFILES_ACTIVE: dev
    depends_on:
      discovery-server:
        condition: service_healthy
      # The gateway must wait for the config server to be healthy to fetch its routes
      config-server:
        condition: service_healthy
    networks:
      - Fabrikka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  discovery-server:
    # The discovery-server should not depend on the config-server to avoid circular dependencies
    image: ${DOCKER_USER}/discovery-server:${SERVICE_VERSION}
    ports:
      - "8761:8761"
    environment:
      SPRING_APPLICATION_NAME: discovery-server
      SPRING_PROFILES_ACTIVE: dev
    networks:
      - Fabrikka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  config-server:
    image: ${DOCKER_USER}/config-server:${SERVICE_VERSION}
    ports:
      - "8888:8888"
    volumes:
      # Mount the local config repo into the container
      - ../config-repo:/config-repo
    environment:
      SPRING_APPLICATION_NAME: config-server
      SPRING_PROFILES_ACTIVE: native # Use the native profile in Docker
      # Override the search location to use the path inside the container
      SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCHLOCATIONS: file:/config-repo
    depends_on:
      discovery-server:
        condition: service_healthy
    networks:
      - Fabrikka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-service:
    image: ${DOCKER_USER}/user-service:${SERVICE_VERSION}
    ports:
      - "9080:9080"
    environment:
      SPRING_APPLICATION_NAME: user-service
      SPRING_PROFILES_ACTIVE: dev
    depends_on:
      discovery-server: { condition: service_healthy }
      config-server: { condition: service_healthy }
    networks:
      - Fabrikka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  product-service:
    image: ${DOCKER_USER}/product-service:${SERVICE_VERSION}
    ports:
      - "8085:8085"
    environment:
      SPRING_APPLICATION_NAME: product-service
      SPRING_PROFILES_ACTIVE: dev
    depends_on:
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - Fabrikka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  order-service:
    image: ${DOCKER_USER}/order-service:${SERVICE_VERSION}
    ports:
      - "9001:9001"
    environment:
      SPRING_APPLICATION_NAME: order-service
      SPRING_PROFILES_ACTIVE: dev
    depends_on:
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - Fabrikka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  notification-service:
    image: ${DOCKER_USER}/notification-service:${SERVICE_VERSION}
    ports:
      - "8082:8082"
    environment:
      SPRING_APPLICATION_NAME: notification-service
      SPRING_PROFILES_ACTIVE: dev
      # Inject secrets for RabbitMQ
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASS}
      # Inject the email password
      SPRING_MAIL_USERNAME: ${GMAIL_USER}
      SPRING_MAIL_PASSWORD: ${GMAIL_APP_PASSWORD}
    depends_on:
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - Fabrikka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  inventory-service:
    image: ${DOCKER_USER}/inventory-service:${SERVICE_VERSION}
    ports:
      - "8086:8086"
    environment:
      SPRING_APPLICATION_NAME: inventory-service
      SPRING_PROFILES_ACTIVE: dev
    depends_on:
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - Fabrikka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  load-product:
    image: ${DOCKER_USER}/load-product:${SERVICE_VERSION}
    ports:
      - "9191:9191"
    environment:
      SPRING_APPLICATION_NAME: load-product
      SPRING_PROFILES_ACTIVE: dev
      # Inject secrets for RabbitMQ
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASS}
    depends_on:
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - Fabrikka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9191/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  cart-service:
    image: ${DOCKER_USER}/cart-service:${SERVICE_VERSION}
    # Port changed from 9000 to 9002 to avoid conflict with Minio
    ports:
      - "9002:9000"
    environment:
      SPRING_APPLICATION_NAME: cart-service
      SPRING_PROFILES_ACTIVE: dev
    depends_on:
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - Fabrikka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP port for applications
      - "15672:15672" # Management UI port
    environment:
      # Use variables from the .env file
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping", "-q"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - Fabrikka